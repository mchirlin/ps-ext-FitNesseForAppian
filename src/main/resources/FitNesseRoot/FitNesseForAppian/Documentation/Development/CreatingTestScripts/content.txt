!1 Creating ''!-FitNesse-! for Appian'' Pages 
New pages can be created by using the header and clicking on Add.  You can add 3 types of pages:
 * Test Pages
 * Suite Pages
 * Static Pages
!2 Test Page

TODO - fix this, add content about what exactly script does and link to the docs
Test pages consist of a test script that can be executed by the tool on the 

The first line of your test script will almost always be '''|script|'''.  '''|script|''' will denote to FitNesse that the following rows are all steps in the test script.

Use the [[''!-FitNesse-! for Appian'' Cheat Sheet][.FitNesseForAppianCheatSheet]] to locate the appropriate method you need to use.  Implement each interaction with Appian by using a specific method that you can find in the [[''!-FitNesse-! for Appian'' Cheat Sheet][.FitNesseForAppianCheatSheet]].

Note: FitNesse wiki language is case sensitive. Methods  are always lower case, and inputs to the methods must match what is displayed on the Appian interface.  

!3 [Indexing]
Indexing is useful for interacting with fields without a label or when multiple fields have the same label.  Indexes start at 1 and can be called like [1].  Indexing can make a test script more fragile when updating the interface. 

!2 Suite Pages
A suite is a collection of test pages and static pages that are related to each other.  Test pages within a suite will contain any !-SetUp, TearDown and ScenarioLibrary-! pages created within the suite.

!2 Static Pages 
A static page is a content page. Static pages can be used to give additional information and context around a suite.  

!3 Certain Static Pages are keywords for FitNesse 

 * '''!-SetUp-!'''
  * A !-SetUp-! page is a static page used to define the actions that will happen at the beginning of every test script run within a suite
  * Typical methods included in a setup are listed in the Setup Configuration section

 * '''!-TearDown-!'''
  * A !-TearDown-! is a static page that defines the actions that happen at the end of every test scriptrun within a suite
  * Typical methods used a !-Teardown-! include
   * '''| logout |''' - logs out of the appian instance
   * '''| tear down |''' - Closes the browser 
 * '''!-ScenarioLibrary-!'''
  * A !-ScenarioLibrary-! is a static page that contains all the available scenarios for a suite
  * Scenarios are reusable methods that are created specifically by using !-FitNesse! for Appian methods to perform actions used multiple times in a test page or suite
  * ADD LINK TO CREATING SCENARIOS
!2 Executing Your Test or Suite
When a Suite or Test page is displayed, the FitNesse header will say Suite or Test, respectively.  When in a Suite, clicking Suite will run all test pages that exist in the suite.  Within a test page, only the test page will run.
!2 Test Script Validation Types
Colors of Highlighted Fields on Results Page:
 * Red means that there was a failure of the test (e.g. element was recognized but not populated).
 * Yellow means that there was an error with the code (e.g. code is missing a |script| line, the field was not found on the page, or a system error).
 * Green means that this line ran correctly.

Test does not start: If the error below appears, simply click on Test/Suite again.

!img -w 750 http://files/images/FitNesse-error.png


*How to Access new pages*

Suites should be created with Contents ...

Organisation of Tests
FitNesse wikis are broken into three types of pages: Static, Test, and Suite.

Static

Static pages simply hold content and cannot be run as tests. Static pages are good for displaying information such as the Cheat Sheet. 

Static pages can also be included in other pages using the !include PageName. For example, if your page URL is http://localhost:8980/TestSuite.TestSubsuite.StaticA you could include that static page on another page using the absolute link of !include .TestSuite.TestSubsuite.StaticA. Or, if that page was in the same suite, you could include by simply using !include StaticA.

Absolute link for including page: !inlude .Suite.Suite.Page (assuming url of FITNESSE_SERVER/Suite.SuiteB.Page)
Relative link for including page in the same suite: !include Page

There are also several types of special static pages that if named a certain way will automatically be included in other pages.
PageHeader
Included at the top of a page. Often used for common titles, or links.
PageFooter
Included at the bottom of a page. Used for copyrights, footers, and common links.
SetUp
Included at the top of test pages only. Used to initialize the test and supply Import tables.
TearDown
Included at the bottom of test pages only. Used to decommission resources used in a test.
SuiteSetUp
Included at the top of a test page and before SetUp. When a suite is run, this page will only be included once at the top of the suite.
SuiteTearDown
Included at the bottom of a test page only, and after TearDown. When a suite is run this page will be included only once at the end of the suite.
TemplateLibrary
These pages act as a marker to find templates to show as available for insertion when editing a page. All children of a TemplateLibrary will be shown in the drop-down list of templates available for insertion. Unlike the other special pages, all brother and uncle TemplateLibrary pages are included. The oldest (grandest uncle) is included first. The brother, if it exists, is included last. This allows younger TemplateLibrary pages to override older ones.
The template library allows you to create new templates for pages instead of the out of the box Test, Suite, and Static pages.  This will allow you to have reusable bolierplate content on each page.
Scenario Library
This page can hold reusable scenarios that may be used across multiple tests. Scenarios are made up of multiple commands in a tabel and are called similarly to normal methods within your test cases.  In order to have a Scenario available to a test, the Scenario must be in its inheritance tree.  That means that the Scenario could be defined in the Test itself or in a ScenarioLibrary sitting in any of the Testâ€™s parent Suites.

For example, if you had the need to fill out the same form in multiple actions you could create a scenario to fill out that form and it might look like this:

!| scenario | fill out form |
| populate field | X | with | Y |
| populate field | A | with | B |
| click on button | Submit |

This scenario could then be included in multiple test scripts like this: 

!| script |
| click on menu | Actions |
| click on Action | Start Form |
| fill out form |

Test

Test pages are the core of FitNesse. This is where you code that will automate the browser lives. Test pages can be run individually by clicking the Test button on the top of the page. And test history can be accessed via Tools>Test History.

As mentioned in the Static page section, test pages will inherit the following special pages from from their most direct ancestor with that page.  Whereas only the most direct SetUp, TearDown, PageHeader, and PageFooters are included every ScenarioLibrary in the heirarachy is included. 

Below are a few examples:

FitNesseRoot Contents
Test Page Content
FitNesseRoot
Suite
SetUp
TearDown
TestPage
PageHeader

[Page Header Content]
[Set Up Content]
[Test Content]
[Tear Down Content]
FitNesseRoot
Suite
SetUp [A]
TearDown
Suite
SetUp [B]
TestPage
PageHeader

[Page Header Content]
[Set Up B Content]
[Test Page Content]
[Tear Down Content]
FitNesseRoot
ScenarioLibrary [A]
Suite
ScenarioLibrary [B]
Suite
ScenarioLibrary [C]
TestPage

[Scenario Library A Content]
[Scenario Library B Content]
[Scenario Library C Content]
[Test Page Content ]
Suite

Suite pages can be thought of as containers for any other type of page: static, suite, and test. Unlike a static page, a suite can be 



e minded test cases should be grouped into Suites.  For example if you have several cases testing the functionality of a record they should be placed into a suite. 

Suites can be nested into other suites.




First Step
Choose a test that is easily repeatable.  For example, a related action editing a record or an action to create a new record.

Creating Data for your test case
One of the keys to creating repeatable test cases is being able to generate realistic data for data entry.




Pros
Cons
Use create random string, int, date, etc..
Easy to use
Cannot be used across multiple tests
Create a way to enter data randomly for each type of field







Pitfalls:
Not using brackets around indices
Example:
| populate field | 1 | with value | 10 | WRONG  
| populate field [1] | with value | 10 | RIGHT 

In the first case it will populate a field with the number 1 in the label rather than the first field.

